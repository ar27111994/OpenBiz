@model BLL.Entities.Inventory.Product

@{
    ViewBag.Title = "Edit";
}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h2 class="modal-title">Edit</h2>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="modal-body">

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SKU, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SKU, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductBasePrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductBasePrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductBasePrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CategoryID, (SelectList)ViewData["CategoryID"], htmlAttributes: new { @class = "form-control", @data_live_search="true" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Barcode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Barcode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitOfMeasurementID, "UnitOfMeasurementID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.UnitOfMeasurementID, (SelectList)ViewData["UnitOfMeasurementID"], htmlAttributes: new { @class = "form-control", @data_live_search="true" })
                @Html.ValidationMessageFor(model => model.UnitOfMeasurementID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BrandID, "BrandID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.BrandID, (SelectList)ViewData["BrandID"], htmlAttributes: new { @class = "form-control", @data_live_search="true" })
                @Html.ValidationMessageFor(model => model.BrandID, "", new { @class = "text-danger" })
            </div>
        </div>

      <div class="form-group">
        @Html.Label("ProductImage", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          <div class="input-group image-preview">
            <input type="text" class="form-control image-preview-filename" disabled="disabled"> <!-- don't give a name === doesn't send on POST/GET -->
            <span class="input-group-btn">
              <!-- image-preview-clear button -->
              <button type="button" class="btn btn-default image-preview-clear" style="display:none;">
                <span class="glyphicon glyphicon-remove"></span> Clear
              </button>
              <!-- image-preview-input -->
              <div class="btn btn-default image-preview-input">
                <span class="glyphicon glyphicon-folder-open"></span>
                <span class="image-preview-input-title">Browse</span>
                <input type="file" accept="image/png, image/jpeg, image/gif" name="upload" /> <!-- rename it -->
              </div>
            </span>
          </div>
        </div>
      </div>

      <div class="form-group">
        @Html.Label("Old Image", new { @class = "control-label col-sm-3" })

        <div class="col-sm-9">
          <img style="max-height:250px;max-width:200px;" class="img-responsive img-thumbnail" src="@Url.Content("~/Content/Images/ProductImages/"+@Model.ProductName+".png")" alt="@Model.ProductName" />
        </div>

      </div>

    </div>
</div>
        <div class="modal-footer">
        <span id="progress" class="text-center" style="display: none;">
            <img src="~/Content/Images/wait.gif" alt="wiat" />
            Wait..
        </span>

        <input class="btn btn-primary" type="submit" value="Save" />
        <button class="btn btn-warning" data-dismiss="modal">Close</button>
    </div>
    <script>
      CKEDITOR.replace('ProductDescription');
      value = $("#ProductDescription").val();
      CKEDITOR.instances['ProductDescription'].setData(value);
      //CKEDITOR.on('instanceReady', function () {
      //  $.each(CKEDITOR.instances, function (instance) {
      //    CKEDITOR.instances[instance].on("change",
      //  function (e) {
      //    for (instance in CKEDITOR.instances
      //  )
      //      CKEDITOR.instances[instance].updateElement();
      //  });
      //  });
      //});
      $("form").removeData("validator");
      $("form").removeData("unobtrusiveValidation");
      $.validator.unobtrusive.parse("form");
    </script>
    <script src="@Url.Content("~/Content/FrontEnd/custom-scripts/image-preview.js")"></script>

}


