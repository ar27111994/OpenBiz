@model BLL.Entities.Warehouse.WarehouseMaterials

@{
    ViewBag.Title = "Create";
}
<div class="modal-header">
  <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
  <h2 class="modal-title">Create</h2>
</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="modal-body">

      <div class="form-horizontal">
        <h4>WarehouseMaterials</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
          @Html.LabelFor(model => model.EntryTitle, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EditorFor(model => model.EntryTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EntryTitle, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.RawMaterialID, "RawMaterialID", htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.DropDownListFor(model => model.RawMaterialID, (SelectList)ViewData["RawMaterialID"], htmlAttributes: new { @class = "form-control", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.RawMaterialID, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.WarehouseID, "WarehouseID", htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.DropDownListFor(model => model.WarehouseID, (SelectList)ViewData["WarehouseID"], htmlAttributes: new { @class = "form-control", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.WarehouseID, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.Label("MaterialMovement", htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.EntryType, htmlAttributes: new { @class = "form-control", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.EntryType, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.PostingTime, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EditorFor(model => model.PostingTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PostingTime, "", new { @class = "text-danger" })
          </div>
        </div>

      </div>
    </div>
    <div class="modal-footer">
      <span id="progress" class="text-center" style="display: none;">
        <img src="~/Content/Images/wait.gif" alt="wiat" />
        Wait..
      </span>

      <input class="btn btn-primary" type="submit" value="Save" />
      <button class="btn btn-warning" data-dismiss="modal">Close</button>
    </div>

    <script>
      $("form").removeData("validator");
      $("form").removeData("unobtrusiveValidation");
      $.validator.unobtrusive.parse("form");
    </script>
}
